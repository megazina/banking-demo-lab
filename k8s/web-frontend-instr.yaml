apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-frontend
spec:
  selector:
    matchLabels:
      name: web-frontend
  replicas: 1
  template:
    metadata:
      labels:
        name: web-frontend
    spec:
      containers:
        - name: web-frontend
          image: mukundbabbar/java-apps:1.0
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8080
            name: app-port
          envFrom:
            - configMapRef:
                name: appd-config
            - secretRef:
                name: appd-secret
          env:
            - name: APPDYNAMICS_AGENT_TIER_NAME
              value: "Web"
            - name: APPDYNAMICS_AGENT_NODE_NAME
              value: "WebNode"
            - name: APPDYNAMICS_CONTROLLER_PORT
              value: "443"
            - name: APPDYNAMICS_CONTROLLER_SSL_ENABLED
              value: "true"
            - name: APPDYNAMICS_JAVA_AGENT_REUSE_NODE_NAME
              value: "true"
            - name: APPDYNAMICS_JAVA_AGENT_REUSE_NODE_NAME_PREFIX
              value: "node"
            - name: JAVA_TOOL_OPTIONS
              value: '-javaagent:/opt/appdynamics/javaagent.jar -Dappdynamics.socket.collection.bci.enable=false -Dappdynamics.argento.enabled=false'
          volumeMounts:
          - mountPath: /opt/appdynamics/
            name: appd-agent-repo
      initContainers:
      - command:
        - cp
        - -r
        - /opt/appdynamics/.
        - /opt/temp
        name: appd-agent
        image: docker.io/appdynamics/java-agent:latest
        volumeMounts:
        - mountPath: /opt/temp
          name: appd-agent-repo
      volumes:
      - emptyDir: {}
        name: appd-agent-repo

---
apiVersion: v1
kind: Service
metadata:
  name: web-frontend
spec:
  selector:
    name: web-frontend
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
status:
  loadBalancer: {}
